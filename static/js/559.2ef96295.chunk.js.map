{"version":3,"file":"static/js/559.2ef96295.chunk.js","mappings":"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","sources":["components/Player/ThirdPersonPlayer.jsx"],"sourcesContent":["/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from \"react\";\r\nimport { OrbitControls, useAnimations, useGLTF } from \"@react-three/drei\";\r\nimport { useThree, useFrame } from \"@react-three/fiber\";\r\nimport { ContextData } from \"../../context/Context\";\r\nimport { Vector3, Quaternion } from \"three\";\r\n// import { Character } from \"./Character\";\r\nimport { angleToRadians } from \"../utils/angle\";\r\n// import { Cuboid } from \"@dimforge/rapier3d-compat\";\r\nimport { CapsuleCollider, RigidBody } from \"@react-three/rapier\";\r\n\r\nlet walkDirection = new Vector3();\r\nlet rotateAngle = new Vector3(0, 1, 0);\r\nlet rotateQuaternion = new Quaternion();\r\nlet cameraTarget = new Vector3();\r\n// const frontVector = new THREE.Vector3();\r\n// const sideVector = new THREE.Vector3();\r\nconst velocity = 5;\r\n// const direction = new THREE.Vector3();\r\n\r\nconst directionOffset = ({ forward, backward, left, right }) => {\r\n  // w key direction\r\n  var directionOffset = 0;\r\n  if (forward) {\r\n    if (left) {\r\n      directionOffset = Math.PI / 4; // w + a key direction\r\n    } else if (right) {\r\n      directionOffset = -Math.PI / 4; // w + d key direction\r\n    }\r\n  } else if (backward) {\r\n    if (left) {\r\n      directionOffset = Math.PI / 4 + Math.PI / 2; // s + a key direction\r\n    } else if (right) {\r\n      directionOffset = -Math.PI / 4 - Math.PI / 2; // s + d key direction\r\n    } else {\r\n      directionOffset = Math.PI; // s key direction\r\n    }\r\n  } else if (left) {\r\n    directionOffset = Math.PI / 2; // a key direction\r\n  } else if (right) {\r\n    directionOffset = -Math.PI / 2; // d key direction\r\n  }\r\n  return directionOffset;\r\n};\r\n\r\nexport default function ThirdPersonPlayer({ props }) {\r\n  const [movement, setMovement] = React.useContext(ContextData);\r\n\r\n  // const [action, setActions] = React.useState(\"idle\");\r\n  const { forward, backward, left, right, jump, room, yrotate } = movement;\r\n  const group = useRef();\r\n  const rigidBody = useRef();\r\n  const currentAction = useRef();\r\n  const controlRef = useRef();\r\n  const { camera } = useThree();\r\n\r\n  const personPosition = {\r\n    Home: [-10, 2, 10],\r\n    Hall: [0, 3, 1],\r\n    FrontYard: [-9, 2, 2],\r\n    Bedroom: [4, 3, 0],\r\n    Terrace: [-4, 6, 1],\r\n  };\r\n  const [position, setPos] = React.useState(personPosition[room]);\r\n\r\n  const { animations, nodes, materials } = useGLTF(\r\n    \"/assets/model/character.glb\"\r\n  );\r\n  const { actions } = useAnimations(animations, group);\r\n\r\n  const updateValue = () => {\r\n    setMovement((m) => ({ ...m, yrotate: yrotate + 1 }));\r\n  };\r\n\r\n  const UpdateCameraTarget = (moveX, moveZ) => {\r\n    const rigidTranslation = rigidBody.current.translation();\r\n    camera.position.x += moveX;\r\n    camera.position.z += moveZ;\r\n    // camera.position.set(...rigidTranslation);\r\n\r\n    // camera.position.y += 0.75;\r\n\r\n    // update camera target\r\n    cameraTarget.x = rigidTranslation.x;\r\n    cameraTarget.z = rigidTranslation.z;\r\n    cameraTarget.y = rigidTranslation.y + 2;\r\n    if (controlRef.current) {\r\n      // console.log(\"controlref\");\r\n      controlRef.current.target = cameraTarget;\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    UpdateCameraTarget(-10, 10);\r\n  }, [camera]);\r\n\r\n  React.useEffect(() => {\r\n    setPos(personPosition[room]);\r\n  }, [room]);\r\n\r\n  React.useEffect(() => {\r\n    let action = \"\";\r\n    if (forward || backward || left || right) {\r\n      console.log(\"walk\");\r\n      // setActions(\"walking\");\r\n      action = \"walking\";\r\n    } else if (jump) {\r\n      console.log(\"jump\");\r\n      // setActions(\"jump\");\r\n      action = \"jump\";\r\n    } else {\r\n      console.log(\"idle\");\r\n      action = \"idle\";\r\n      // setActions(\"idle\");\r\n    }\r\n    // console.log(currentAction.current);\r\n    // console.log(action);\r\n    if (currentAction.current != action) {\r\n      console.log(action);\r\n      const nextAction = actions[action];\r\n      const current = actions[currentAction.current];\r\n      current?.fadeOut(0.2);\r\n      nextAction?.reset().fadeIn(0.2).play();\r\n      currentAction.current = action;\r\n    }\r\n  }, [forward, backward, left, right, jump]);\r\n\r\n  useFrame((state, delta) => {\r\n    if (forward || backward || left || right) {\r\n      // calculate camera direction\r\n      const translation = rigidBody.current.translation();\r\n\r\n      let angleYCameraDirection = Math.atan2(\r\n        camera.position.x - translation.x,\r\n        camera.position.z - translation.z\r\n      );\r\n\r\n      let newDirectionalOffset = directionOffset({\r\n        forward,\r\n        backward,\r\n        left,\r\n        right,\r\n      });\r\n\r\n      rotateQuaternion.setFromAxisAngle(\r\n        rotateAngle,\r\n        angleYCameraDirection + newDirectionalOffset\r\n      );\r\n\r\n      // group.current.quaternion.rotateTowards(rotateQuaternion, 0.5);\r\n      rigidBody.current.setRotation(rotateQuaternion, true);\r\n\r\n      // camera.getWorldQuaternion(rotateQuaternion);\r\n\r\n      camera.getWorldDirection(walkDirection);\r\n      // console.log(walkDirection);\r\n      walkDirection\r\n        .normalize()\r\n        .applyAxisAngle(rotateAngle, newDirectionalOffset);\r\n      // walkDirection.y = 0;\r\n\r\n      // const cameraPositionOffset = camera.position.sub(group.current.position);\r\n\r\n      const moveX = walkDirection.x * velocity * delta;\r\n      const moveZ = walkDirection.z * velocity * delta;\r\n\r\n      // group.current.position.x += moveX;\r\n      // group.current.position.z += moveZ;\r\n\r\n      rigidBody.current.setTranslation(\r\n        {\r\n          x: translation.x + moveX,\r\n          y: translation.y,\r\n          z: translation.z + moveZ,\r\n        },\r\n        true\r\n      );\r\n\r\n      UpdateCameraTarget(moveX, moveZ);\r\n    } else {\r\n      UpdateCameraTarget(0, 0);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <OrbitControls\r\n        ref={controlRef}\r\n        // panSpeed={0.25}\r\n        rotateSpeed={0.2}\r\n        minDistance={0.5}\r\n        maxDistance={2.5}\r\n        minPolarAngle={\r\n          forward === true ||\r\n          backward === true ||\r\n          left === true ||\r\n          right === true\r\n            ? angleToRadians(95)\r\n            : angleToRadians(50)\r\n        }\r\n        maxPolarAngle={\r\n          forward === true ||\r\n          backward === true ||\r\n          left === true ||\r\n          right === true\r\n            ? angleToRadians(95)\r\n            : angleToRadians(150)\r\n        }\r\n        zoomSpeed={0.5}\r\n        enablePan={false}\r\n        enableRotate={\r\n          backward === true || left === true || right === true ? false : true\r\n        }\r\n        enableDamping={true}\r\n      />\r\n\r\n      <RigidBody\r\n        ref={rigidBody}\r\n        colliders={false}\r\n        mass={60}\r\n        type=\"dynamic\"\r\n        enabledRotations={[false, false, false]}\r\n        position={position}\r\n        canSleep={false}\r\n        enableCcd={true}\r\n        linearDamping={2}\r\n        onCollisionEnter={(e) => {\r\n          // console.log(\"Collision\");\r\n          // console.log(e.rigidBodyObject.children[0].name);\r\n          if (e.rigidBodyObject?.children[0]?.name?.startsWith(\"coin\")) {\r\n            if (e.rigidBodyObject.visible == true) {\r\n              e.rigidBodyObject.visible = false;\r\n              updateValue();\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        <CapsuleCollider args={[0, 0.4]} />\r\n        <group ref={group} {...props} dispose={null}>\r\n          <group name=\"Scene\">\r\n            <group name=\"Armature\" rotation={[Math.PI, 0, Math.PI]}>\r\n              <primitive object={nodes.mixamorigHips} />\r\n              <primitive object={nodes.Ctrl_Master} />\r\n              <primitive object={nodes.Ctrl_ArmPole_IK_Left} />\r\n              <primitive object={nodes.Ctrl_Hand_IK_Left} />\r\n              <primitive object={nodes.Ctrl_ArmPole_IK_Right} />\r\n              <primitive object={nodes.Ctrl_Hand_IK_Right} />\r\n              <primitive object={nodes.Ctrl_Foot_IK_Left} />\r\n              <primitive object={nodes.Ctrl_LegPole_IK_Left} />\r\n              <primitive object={nodes.Ctrl_Foot_IK_Right} />\r\n              <primitive object={nodes.Ctrl_LegPole_IK_Right} />\r\n              <skinnedMesh\r\n                name=\"Ch42_Sneakers\"\r\n                geometry={nodes.Ch42_Sneakers.geometry}\r\n                material={materials.Ch42_Body}\r\n                skeleton={nodes.Ch42_Sneakers.skeleton}\r\n              />\r\n            </group>\r\n          </group>\r\n        </group>\r\n      </RigidBody>\r\n    </>\r\n  );\r\n}\r\n"],"names":["walkDirection","Vector3","rotateAngle","rotateQuaternion","Quaternion","cameraTarget","ThirdPersonPlayer","_ref2","props","_React$useContext","React","ContextData","_React$useContext2","_slicedToArray","movement","setMovement","forward","backward","left","right","jump","room","yrotate","group","useRef","rigidBody","currentAction","controlRef","camera","useThree","personPosition","Home","Hall","FrontYard","Bedroom","Terrace","_React$useState","_React$useState2","position","setPos","_useGLTF","useGLTF","animations","nodes","materials","actions","useAnimations","UpdateCameraTarget","moveX","moveZ","rigidTranslation","current","translation","x","z","y","target","action","console","log","nextAction","fadeOut","reset","fadeIn","play","useFrame","state","delta","angleYCameraDirection","Math","atan2","newDirectionalOffset","_ref","directionOffset","PI","setFromAxisAngle","setRotation","getWorldDirection","normalize","applyAxisAngle","setTranslation","_jsxs","_Fragment","children","_jsx","OrbitControls","ref","rotateSpeed","minDistance","maxDistance","minPolarAngle","angleToRadians","maxPolarAngle","zoomSpeed","enablePan","enableRotate","enableDamping","RigidBody","colliders","mass","type","enabledRotations","canSleep","enableCcd","linearDamping","onCollisionEnter","e","_e$rigidBodyObject","_e$rigidBodyObject$ch","_e$rigidBodyObject$ch2","rigidBodyObject","name","startsWith","visible","m","_objectSpread","CapsuleCollider","args","dispose","rotation","object","mixamorigHips","Ctrl_Master","Ctrl_ArmPole_IK_Left","Ctrl_Hand_IK_Left","Ctrl_ArmPole_IK_Right","Ctrl_Hand_IK_Right","Ctrl_Foot_IK_Left","Ctrl_LegPole_IK_Left","Ctrl_Foot_IK_Right","Ctrl_LegPole_IK_Right","geometry","Ch42_Sneakers","material","Ch42_Body","skeleton"],"sourceRoot":""}